language: dart
branches:
  only:
  - master
  # Semantic version tags and legacy branches of the form "1.2.x".
  - "/^\\d+\\.\\d+\\.(\\d+([+-].*)?|x)$/"

# TODO(nweiz): Make this stable when Dart 2.10.0 launches with a fix for
# dart-lang/pub#2545.
dart: 2.8.1

cache:
  directories:
  - $HOME/.pub-cache

env:
  global:
  - PROTOBUF_VERSION=3.10.1
  - PATH="$HOME/protoc/bin:$PATH"

before_install:
- if [[ "$TRAVIS_OS_NAME" = windows ]]; then
    curl -Lo protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOBUF_VERSION}/protoc-${PROTOBUF_VERSION}-win64.zip;
  else
    curl -Lo protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOBUF_VERSION}/protoc-${PROTOBUF_VERSION}-${TRAVIS_OS_NAME}-x86_64.zip;
  fi
- unzip -d "$HOME/protoc" protoc.zip

before_script:
- pub run grinder protobuf
# Format the generated code or else the formatter task will get upset.
# TODO(awjin): Re-enable this once dart-lang/sdk#42989 is fixed.
# - dartfmt -w --fix lib/src/embedded_sass.pb*
- pub run grinder pkg-standalone-dev

jobs:
  include:

  ## Testing

  - dart_task: test
  - dart: dev
    dart_task: test
  - os: windows
    dart_task: test
  - os: osx
    dart_task: test

  # Static checks
  - dart_task: {dartanalyzer: --fatal-warnings ./}
  # TODO(awjin): Re-enable this once dart-lang/sdk#42989 is fixed.
  # - dart_task: dartfmt

  ## Deploying

  # Deploy Linux releases to GitHub. Mac OS and Windows releases are deployed in
  # a later stage so that we can build native snapshots on bots with the same
  # operating system.
  - stage: deploy 1
    name: "GitHub: Linux"
    if: &deploy-if
      (type IN (push, api)) AND (repo = sass/dart-sass-embedded) AND tag =~ ^\d+\.\d+\.\d+([+-].*)?$
    env: &github-env
      - GITHUB_USER=sassbot
      # GITHUB_TOKEN="..."
      - secure: "Z77zxJXwfCdwD1E/jsUi7U/G3O9fak/7C9VESoNyHYm0QBRXA/Soy4+Iydg8nGz/NZSbWrx1MA4OlAfndqSzrKqosjezZguOEWrLLN6y1ac4Ba0yfp1askxXMAs6qjQTW6j+/TsFH8b9N9eQAvHDu6cVnRjHHvEJ8elQtsUmWw80/+kaLZ7xgLqOGKnaADQice0T6Z/GtjQGQMD4SEN1im6AH21LE4ebk66SOuuy1eQ/gwRoESOZSXO2p3CP+5nQcqmZG1h9ygK9VQiderMLtI39OLq6VWIe49Bq5NECxblVlvU2ABcBxHSSYr9snCgxQtuZSs3BFIqNE+/mJV/udwcD1ITgF6Y2p6uCY9YH/Rfqz5ajJWRByVJ7aj2dJI01l9w0z7OrLNSHVLFQfunJ6I0TjI/vMyEptvEgbtcGJHloKLHBlMKqKB4JhT3o/eitirULII6h2wI1uyFZkiSSoH/y2CGm03HzOimAZFOOesE2dY8fusTbi8/8OgFYFYg0Kn9Ru2e3BKfDZiOd+kptGlgWhqJvMuNpQiB4QI2AT9BoL0hU1FGAYatiGRHPoD+U0rdq3ypY92uxE8CSmaxXMlgBHErmqu4UD+bFpCJ9PMVUkdy9DMy/8HhxaDDp22mE+gcI8L2ynk7sWCEKOKaL/uguPMFOlWZtvL0rLV8kp0g="
    script: skip # Don't run tests
    deploy:
      provider: script
      script: pub run grinder pkg-github-release pkg-github-linux
      skip_cleanup: true # Don't clean up the Dart SDK.

      # This causes the deploy to only be build when a tag is pushed. This
      # is because the `tag` attribute in `if:` statements has a different
      # understanding of the "current tag" than this, which uses the
      # `TRAVIS_TAG` environment variable. `if:` statements check whether a
      # tag exists that refers to the current commit, whereas `TRAVIS_TAG`
      # checks whether the current build was caused by a tag.
      #
      # We check `if:` because it avoids unnecessary build steps, and
      # `on: {tags: true}` ensures that we only deploy on the build caused
      # by pushing a tag, not the build caused by pushing master.
      on: {tags: true}

  # Deploy to Bazel. This is in a separate deploy stage because it needs to
  # install the npm package.
  - stage: deploy 2
    name: "GitHub: Mac OS"
    if: *deploy-if
    env: *github-env
    script: skip
    os: osx
    deploy:
      provider: script
      script: pub run grinder pkg-github-macos
      skip_cleanup: true
      on: {tags: true}

  - name: "GitHub: Windows"
    if: *deploy-if
    env: *github-env
    script: skip
    os: windows
    deploy:
      provider: script
      script: pub run grinder pkg-github-windows
      skip_cleanup: true
      on: {tags: true}
